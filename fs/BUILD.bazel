# SPDX-License-Identifier: MIT
# Filesystem archive for HBF

# Step 1: Create SQLite archive from fs/ directory
genrule(
    name = "fs_archive",
    srcs = glob(
        ["hbf/**/*", "static/**/*"],
        exclude = ["BUILD.bazel"],
        exclude_directories = 1,
    ) + [
        "@htmx//file",
        "@monaco_editor//:min_vs",
    ],
    outs = ["fs.db"],
    cmd = """
        # Create staging directory structure
        mkdir -p staging/hbf staging/static/vendor staging/static/monaco

        # Copy local fs/ files using glob patterns
        for src in $(SRCS); do
            # Match files starting with 'fs/hbf/' (local files)
            if [[ $$src == fs/hbf/* ]]; then
                # Extract everything after 'fs/hbf/'
                rel_path=$${src#fs/hbf/}
                mkdir -p staging/hbf/$$(dirname $$rel_path)
                cp $$src staging/hbf/$$rel_path
            fi
        done

        # Copy all globbed static files
        for src in $(SRCS); do
            # Match files starting with 'fs/static/' (local files)
            if [[ $$src == fs/static/* ]]; then
                # Extract everything after 'fs/static/'
                rel_path=$${src#fs/static/}
                mkdir -p staging/static/$$(dirname $$rel_path)
                cp $$src staging/static/$$rel_path
            fi
        done

        # Stage HTMX
        cp $(location @htmx//file) staging/static/vendor/htmx.min.js

        # Stage Monaco Editor (preserving min/vs/** structure)
        for monaco_file in $(locations @monaco_editor//:min_vs); do
            # Extract path after 'min/' (e.g., .../min/vs/loader.js -> vs/loader.js)
            rel_path=$${monaco_file##*/min/}
            mkdir -p staging/static/monaco/$$(dirname $$rel_path)
            cp $$monaco_file staging/static/monaco/$$rel_path
        done

        # Create SQLAR archive
        cd staging && sqlite3 -A -cf ../$(location fs.db) hbf static

        # Cleanup
        cd .. && rm -rf staging
    """,
)

# Step 2: Convert database to C source files
genrule(
    name = "fs_db_gen",
    srcs = [":fs_archive"],
    outs = [
        "fs_embedded.c",
        "fs_embedded.h",
    ],
    cmd = "$(location //tools:db_to_c) $(location :fs_archive) $(location fs_embedded.c) $(location fs_embedded.h)",
    tools = ["//tools:db_to_c"],
)

# Step 3: Create library with embedded database
cc_library(
    name = "fs_embedded",
    srcs = ["fs_embedded.c"],
    hdrs = ["fs_embedded.h"],
    includes = ["."],
    visibility = ["//visibility:public"],
)

# Test archive creation
sh_test(
    name = "fs_build_test",
    srcs = ["fs_build_test.sh"],
    args = ["$(location :fs_archive)"],
    data = [":fs_archive"],
)
