name: build-full
description: Build stripped and unstripped HBF binaries, prepare named assets, and upload as artifacts

inputs:
  tag:
    description: Identifier used in asset filenames (e.g., v1.2.3 or commit SHA)
    required: true
  artifact-name:
    description: Name for the uploaded artifact bundle
    default: build-assets
    required: false
  retention-days:
    description: Artifact retention in days
    default: '7'
    required: false

runs:
  using: composite
  steps:

    - name: Set up Bazelisk
      uses: bazelbuild/setup-bazelisk@v3

    - name: Cache Bazel directories
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-${{ hashFiles('**/*.bzl', '**/*.bazel', '.bazelrc', 'MODULE.bazel', '**/MODULE.bazel', '**/BUILD.bazel') }}
        restore-keys: |
          ${{ runner.os }}-bazel-

    - name: Build binaries (stripped and unstripped)
      shell: bash
      env:
        BAZELISK_GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -euo pipefail
        bazel build //:hbf
        bazel build //:hbf_unstripped

    - name: Prepare assets
      shell: bash
      run: |
        set -euo pipefail
        TAG="${{ inputs.tag }}"
        NAME_STRIPPED="hbf-${TAG}-linux-x86_64"
        NAME_UNSTRIPPED="hbf-${TAG}-linux-x86_64-unstripped"
        cp bazel-bin/hbf "$NAME_STRIPPED"
        cp bazel-bin/internal/core/hbf "$NAME_UNSTRIPPED"
        sha256sum "$NAME_STRIPPED" > "$NAME_STRIPPED.sha256"
        sha256sum "$NAME_UNSTRIPPED" > "$NAME_UNSTRIPPED.sha256"

    - name: Upload build assets
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        retention-days: ${{ inputs.retention-days }}
        if-no-files-found: error
        path: |
          hbf-${{ inputs.tag }}-linux-x86_64
          hbf-${{ inputs.tag }}-linux-x86_64.sha256
          hbf-${{ inputs.tag }}-linux-x86_64-unstripped
          hbf-${{ inputs.tag }}-linux-x86_64-unstripped.sha256
